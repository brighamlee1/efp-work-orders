// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email               String
  username            String  @unique
  password            String
  forcePasswordChange Boolean @default(true)
  firstName           String
  lastName            String
  name                String
  group               String
  active              Boolean @default(true)

  dayOrders      DayOrder[]
  firebaseTokens FirebaseToken[]
}

model Job {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  number String
  active Boolean @default(true)

  dayOrders DayOrder[]
}

model DayOrder {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date                  DateTime?
  remarks               String?
  status                String    @default("New")
  shipmentDate          DateTime?
  total                 Decimal?  @db.Decimal(10, 2)
  notes                 String?   @db.Text
  verified              Boolean   @default(false)
  deliveryDateRequested DateTime?

  // relational fields
  items    DayOrderItem[]
  fitter   User?          @relation(fields: [fitterId], references: [id], onDelete: SetNull)
  fitterId Int?
  job      Job?           @relation(fields: [jobId], references: [id], onDelete: SetNull)
  jobId    Int?

  @@index([fitterId])
  @@index([jobId])
}

model DayOrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantityRequired      Int
  quantityBackOrder     Int?
  efpInventory          Int?
  fromVendor            Int?
  backorderDeliveryDate DateTime?
  notes                 String?
  description           String
  itemCost              Decimal?  @db.Decimal(10, 2)
  totalCost             Decimal?  @db.Decimal(10, 2)

  // relational fields
  dayOrder   DayOrder @relation(fields: [dayOrderId], references: [id], onDelete: Cascade)
  dayOrderId Int

  @@index([dayOrderId])
}

model FirebaseToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  deviceId   String?
  deviceInfo String? // Optional: Store additional information like device type, OS, etc.
}
